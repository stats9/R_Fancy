---
title: "distance-similarity index"

format:
    gfm: 
        columns: 2
        papersize: a3
        toc: true
        toc-title: "Contents"
        toc-depth: 6
---

<hr><hr>
<br><br>


#### preparation for using R and python 

```{r}
library (reticulate)
path <- Sys.which("python")
path <- gsub("\\", "//", path, fixed = TRUE)
use_python(path)

```

<hr><hr>
<br><br>


#### Eculidean Distance Using R (i)
<hr>

```{r}

set.seed(123)
Mat <- matrix(rnorm(40, 2, 2) |> round(2), 2, 20)
head(Mat)
dist(Mat, method = "euclidean")
```

<br><br>



#### Eculidean Distance Using python (i)
<hr>

```{python}

from scipy.spatial import distance

# Calculate Euclidean distance
dist = distance.euclidean(r.Mat[0, :], r.Mat[1, :])
print(round(dist, 5))

```


<br>
<br>
<br>



### Minkovski Distance Using R (ii)
<br>

```{r}
k <- 5
dist(Mat, method = "minkowski", p = k)
```

<br><br> 


### Minkovski Distance Using Python (ii)
<hr>

```{python}
distance.minkowski(r.Mat[0, :], r.Mat[1, :], r.k)
```




<br>
<br>
<br>



### Manhattan Distance Using R (iii)
<br>

```{r}
dist(Mat, method = "manhattan")
```

<br><br> 


### Manhattan Distance Using Python (iii)
<hr>

```{python}
distance.cityblock(r.Mat[0, :], r.Mat[1, :])
```





<br>
<br>
<br>



###  hamming Distance Using R (iv)
<br>

```{r}

x <- c(1, -1, 1, 1, -1, 1, 1)
y <- c(-1, -1, 1, 1, 1, -1, 1)
Hamming_dist <- sum(x != y)
Hamming_dist
```

<br><br> 


### hamming Distance Using Python (iv)
<hr>

```{python}
distance.hamming(r.x, r.y) * len(r.x)
```



<br>
<br>
<br>



###  Cosine Distance Using R (v)
<br>

```{r}
if(!require(stylo)) {
    chooseCRANmirror(graphics = F, ind = 1)
    install.packages("stylo")
}


x <- c(3, 4, 1, 3, 5, 10)
y <- c(1, 0, 3, 5, 10, 11)
cosine_dist <- stylo :: dist.cosine(rbind(x, y))
cosine_dist
```

<br><br> 


### Cosine Distance Using Python (v)
<hr>

```{python}
distance.cosine(r.x, r.y) 
```


<br>
<br>
<br>



###  gower Index Using R (vi)
<br>

```{r}
if(!require(cluster)) {
    chooseCRANmirror(graphics = F, ind = 1)
    install.packages("cluster")
}




df <- data.frame(
  num = c(1, 2, 3, 4),
  cat = factor(c("A", "B", "A", "B"))
)

df
gower_dist <- cluster :: daisy(df, metric = "gower")

print(gower_dist)

```

<br><br> 


### gower Index Using Python (vi)
<hr>

```{python}
import PyDistances as distt
import pandas as pd
distt.Gower_Similarity_Matrix(r.df, p1 = 1, p2 = 0, p3 = 1)
```


<br>
<br>
<br>


### Czekanowski-Sorensen Index Using R 

```{r}
x <- c('a', 'a', 'b', 'c', 'b', 'b', 'a')
y <- c('b', 'd', 'a', 'b', 'a', 'b', 'c')

dist_sorensen <- 2 * (intersect(x, y) |> length()) / 
                    (x |> unique() |> length() + y |> unique()|> length()) 
dist_sorensen
```


<br><br><br> 


### Czekanowski-Sorensen Index Using python 


```{python}
2 * len(set(r.x).intersection(set(r.y))) / (len(set(r.x)) + len(set(r.y)))

```

<br>
<br>
<br>


### Jaccard Index Using R 

```{r}
x <- c('a', 'a', 'b', 'c', 'b', 'b', 'a')
y <- c('b', 'd', 'a', 'b', 'a', 'b', 'c')

dist_Jaccard <- (intersect(x, y) |> length()) / 
                    (union(x, y) |> length()) 
dist_Jaccard
```


<br><br><br> 


### Jaccard Index Using python 


```{python}
len(set(r.x).intersection(set(r.y))) / (len(set(r.x).union(set(r.y))))
```

