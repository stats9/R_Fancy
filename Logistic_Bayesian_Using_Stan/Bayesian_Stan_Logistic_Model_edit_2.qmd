---
title: Using stan | bayesian Model for Logistic regression 
format: gfm
editor: visual
---

## load libraries ----------------

```{r}
#| warning: false
#| fig-height: 9
#| fig-width: 9
## for load rstan package
if (!require(rstan)) {
    install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
    library(rstan)
}




## for parallel calculation 
options(mc.cores = parallel :: detectCores())

## for adjust run programming
rstan_options(auto_write = TRUE)




## for load tidyverse packages, (manipulate data and use ggplot objects)
if (!require(tidyverse)) {
    chooseCRANmirror(graphics = FALSE, ind = 1)
    install.packages("tidyverse")
    library(tidyverse)
}


## for feature selection 

if(!require(mlbench)) {
    chooseCRANmirror(graphics = FALSE, ind = 1)
    install.packages("mlbench")
    library(mlbench)
}

if(!require(caret)) {
    chooseCRANmirror(graphics = FALSE, ind = 1)
    install.packages("caret")
    library(caret)
}

```


***
***


#### load data -------------------


```{r}
set.seed(132)

dat <- read.csv(file = "diabetes_binary_5050split_health_indicators_BRFSS2015.csv", header = TRUE)

names(dat)

```




```{r}
#| warning: false
#| fig-height: 9
#| fig-height: 9


glimpse(dat)

# Diabetes_binary
dat |> 
    transmute(Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(y = Diabetes_binary, fill = Diabetes_binary)) + 
    geom_bar() + 
    theme_bw()

dat |> _$Diabetes_binary |> table()


## HighBP 
dat |> 
    transmute(HighBP = factor(HighBP)) |> 
    ggplot(aes(y = HighBP, fill = HighBP)) + 
    geom_bar() + 
    theme_bw()

dat |> _$HighBP |> table()



## HighChol
dat |> 
    transmute(HighChol = factor(HighChol)) |> 
    ggplot(aes(y = HighChol, fill = HighChol)) + 
    geom_bar() + 
    theme_bw()

dat |> _$HighChol |> table()


## CholCheck 
dat |> 
    transmute(CholCheck = factor(CholCheck)) |> 
    ggplot(aes(y = CholCheck, fill = CholCheck)) + 
    geom_bar() + 
    theme_bw()

dat |> _$CholCheck |> table()



## BMI 
dat |> 
    ggplot(aes(x = BMI)) + 
    geom_histogram(col = "orange", fill = "darkblue", bins = 30) + 
    theme_bw()

# install.packages("psych")
dat |> _$BMI |> psych :: describe()



## Smoker
dat |> 
    transmute(Smoker = factor(Smoker)) |> 
    ggplot(aes(y = Smoker, fill = Smoker)) + 
    geom_bar() + 
    theme_bw()

dat |> _$Smoker |> table()


## Stroke 
dat |> 
    transmute(Stroke = factor(Stroke)) |> 
    ggplot(aes(y = Stroke, fill = Stroke)) + 
    geom_bar() + 
    theme_bw()

dat |> _$Stroke |> table()



# HeartDiseaseorAttack 
dat |> 
    transmute(HeartDiseaseorAttack = factor(HeartDiseaseorAttack)) |> 
    ggplot(aes(y = HeartDiseaseorAttack, fill = HeartDiseaseorAttack)) + 
    geom_bar() + 
    theme_bw()

dat |> _$HeartDiseaseorAttack |> table()



# # PhysActivity 
dat |> 
    transmute(PhysActivity = factor(PhysActivity)) |> 
    ggplot(aes(y = PhysActivity, fill = PhysActivity)) + 
    geom_bar() + 
    theme_bw()

dat |> _$PhysActivity |> table()



# Fruites
dat |> 
    transmute(Fruits = factor(Fruits)) |> 
    ggplot(aes(y = Fruits, fill = Fruits)) + 
    geom_bar() + 
    theme_bw()

dat |> _$Fruites |> table()


# Veggies
dat |> 
    transmute(Veggies = factor(Veggies)) |> 
    ggplot(aes(y = Veggies, fill = Veggies)) + 
    geom_bar() + 
    theme_bw()

dat |> _$Veggies |> table()


# HvyAlcoholConsump
dat |> 
    transmute(HvyAlcoholConsump = factor(HvyAlcoholConsump)) |> 
    ggplot(aes(y = HvyAlcoholConsump, fill = HvyAlcoholConsump)) + 
    geom_bar() + 
    theme_bw()

dat |> _$HvyAlcoholConsump |> table()



# AnyHealthcare
dat |> 
    transmute(AnyHealthcare = factor(AnyHealthcare)) |> 
    ggplot(aes(y = AnyHealthcare, fill = AnyHealthcare)) + 
    geom_bar() + 
    theme_bw()

dat |> _$AnyHealthcare |> table()


# NoDocbcCost
dat |> 
    transmute(NoDocbcCost = factor(NoDocbcCost)) |> 
    ggplot(aes(y = NoDocbcCost, fill = NoDocbcCost)) + 
    geom_bar() + 
    theme_bw()

dat |> _$NoDocbcCost |> table()




# GenHlth
dat |> 
    transmute(GenHlth = factor(GenHlth)) |> 
    ggplot(aes(y = GenHlth, fill = GenHlth)) + 
    geom_bar() + 
    theme_bw()

dat |> _$GenHlth |> table()



# MentHlth
dat |> 
    transmute(MentHlth = factor(MentHlth)) |>
    ggplot(aes(y = MentHlth, fill = MentHlth)) + 
    geom_bar() + 
    theme_bw()

dat |> _$MentHlth |> table()

dat[["PhysHlth"]] |> table()

# PhysHlth
dat |> 
    transmute(PhysHlth = factor(PhysHlth)) |> 
    ggplot(aes(y = PhysHlth, fill = PhysHlth)) + 
    geom_bar() + 
    theme_bw()

dat |> _$PhysHlth |> table()



# DiffWalk
dat |> 
    transmute(DiffWalk = factor(DiffWalk)) |> 
    ggplot(aes(y = DiffWalk, fill = DiffWalk)) + 
    geom_bar() + 
    theme_bw()

dat |> _$DiffWalk |> table()


# Sex
dat |> 
    transmute(Sex = factor(Sex)) |> 
    ggplot(aes(y = Sex, fill = Sex)) + 
    geom_bar() + 
    theme_bw()

dat |> _$Sex |> table()



Sex# Age
dat |> 
    transmute(Age = factor(Age)) |> 
    ggplot(aes(y = Age, fill = Age)) + 
    geom_bar() + 
    theme_bw()

dat |> _$Age |> table()



# Education
dat |> 
    transmute(Education = factor(Education)) |> 
    ggplot(aes(y = Education, fill = Education)) + 
    geom_bar() + 
    theme_bw()

dat |> _$Education |> table()



# Income
dat |> 
    transmute(Income = factor(Income)) |> 
    ggplot(aes(y = Income, fill = Income)) + 
    geom_bar() + 
    theme_bw()

dat |> _$Income |> table()


##### joint relation  (Sex, Smoker)
dat |> 
    with(table(Sex, Smoker)) 

dat |> 
    select(c("Sex", "Smoker")) |> 
    mutate(Sex = factor(Sex),  
            Smoker = factor(Smoker)) |> 
    ggplot(aes(x = Sex, fill = Smoker)) +
    geom_bar(position = "dodge")


##### joint relation  (Diabetes_binary, Smoker)
dat |> 
    with(table(Diabetes_binary, Smoker)) 

dat |> 
    select(c("Diabetes_binary", "Smoker")) |> 
    mutate(Smoker = factor(Smoker), 
            Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(x = Sex, fill = Smoker |> as.factor())) +
    geom_bar(position = "dodge")


##### joint relation  (Diabetes_binary, Sex)
dat |> 
    with(table(Diabetes_binary, Sex)) 

dat |> 
    select(c("Diabetes_binary", "Sex")) |> 
    mutate(Sex = factor(Sex), 
            Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(x = Diabetes_binary, fill = Sex)) +
    geom_bar(position = "dodge")


#### Joint Relation (Diabetes_binary, HeartDiseaseorAttack)
dat |> 
    with(table(Diabetes_binary, HeartDiseaseorAttack)) 

dat |> 
    select(c("Diabetes_binary", "HeartDiseaseorAttack")) |> 
    mutate(HeartDiseaseorAttack = factor(HeartDiseaseorAttack), 
            Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(x = Diabetes_binary, fill = HeartDiseaseorAttack)) +
    geom_bar(position = "dodge")



#### Joint Relation (Diabetes_binary, PhysActivity)
dat |> 
    with(table(Diabetes_binary, PhysActivity)) 

dat |> 
    select(c("Diabetes_binary", "PhysActivity")) |> 
    mutate(PhysActivity = factor(PhysActivity), 
            Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(x = Diabetes_binary, fill = PhysActivity)) +
    geom_bar(position = "dodge")



#### Joint Relation (Diabetes_binary, Fruits)
dat |> 
    with(table(Diabetes_binary, Fruits)) 

dat |> 
    select(c("Diabetes_binary", "Fruits")) |> 
    mutate(Fruits = factor(Fruits), 
            Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(x = Diabetes_binary, fill = Fruits)) +
    geom_bar(position = "dodge")



#### Joint Relation (Diabetes_binary, HvyAlcoholConsump)
dat |> 
    with(table(Diabetes_binary, HvyAlcoholConsump)) 

dat |> 
    select(c("Diabetes_binary", "HvyAlcoholConsump")) |> 
    mutate(HvyAlcoholConsump = factor(HvyAlcoholConsump), 
            Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(x = Diabetes_binary, fill = HvyAlcoholConsump)) +
    geom_bar(position = "dodge")



#### Joint Relation (Diabetes_binary, NoDocbcCost)
dat |> 
    with(table(Diabetes_binary, NoDocbcCost)) 

dat |> 
    select(c("Diabetes_binary", "NoDocbcCost")) |> 
    mutate(NoDocbcCost = factor(NoDocbcCost), 
            Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(x = Diabetes_binary, fill = NoDocbcCost)) +
    geom_bar(position = "dodge")



#### Joint Relation (Diabetes_binary, MentHlth)
dat |> 
    with(table(Diabetes_binary, MentHlth)) 

dat |> 
    select(c("Diabetes_binary", "MentHlth")) |> 
    mutate(MentHlth = factor(MentHlth), 
            Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(x = Diabetes_binary, fill = MentHlth)) +
    geom_bar(position = "dodge")



#### Joint Relation (Diabetes_binary, DiffWalk)
dat |> 
    with(table(Diabetes_binary, DiffWalk)) 

dat |> 
    select(c("Diabetes_binary", "DiffWalk")) |> 
    mutate(DiffWalk = factor(DiffWalk), 
            Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(x = Diabetes_binary, fill = DiffWalk)) +
    geom_bar(position = "dodge")



#### Joint Relation (Diabetes_binary, Education)
dat |> 
    with(table(Diabetes_binary, Education)) 

dat |> 
    select(c("Diabetes_binary", "Education")) |> 
    mutate(Education = factor(Education), 
            Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(x = Diabetes_binary, fill = Education)) +
    geom_bar(position = "dodge")




#### Joint Relation (Diabetes_binary, Income)
dat |> 
    with(table(Diabetes_binary, Income)) 

dat |> 
    select(c("Diabetes_binary", "Income")) |> 
    mutate(Income = factor(Income), 
            Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(x = Diabetes_binary, fill = Income)) +
    geom_bar(position = "dodge")



#### Joint Relation (Diabetes_binary, Age)
dat |> 
    with(table(Diabetes_binary, Age)) 

dat |> 
    select(c("Diabetes_binary", "Age")) |> 
    mutate(Age = factor(Age), 
            Diabetes_binary = factor(Diabetes_binary)) |> 
    ggplot(aes(x = Diabetes_binary, fill = Age)) +
    geom_bar(position = "dodge")

#### Joint Relation (Diabetes_binary, BMI)
dat |> 
    with(aggregate(BMI, list(Diabetes_binary), FUN = mean)) |> 
    setNames(c("Diabetes_binary", "BMI_Mean"))

dat |> 
    select(c("Diabetes_binary", "BMI")) |> 
    mutate(Diabetes_binary = factor(Diabetes_binary)) |>
    ggplot(aes(y =BMI, fill = Diabetes_binary |> as.factor())) +
    geom_boxplot() + 
    theme_bw()
```





***
***
***



## Get Correlation Matrix between variables 


```{r}
#| warning: false
#| fig-height: 12
#| fig-width: 12

# install.packages("sjstats")
library(sjstats)

corr_mat <- matrix(NA, ncol(dat), ncol(dat))
col_count = 0
for (i in names(dat)) {
    col_count = col_count + 1
    row_count = 0
    for (j in names(dat)) {
        row_count = row_count + 1
        temp1 <- dat[[i]] 
        temp2 <- dat[[j]]
        temp3 <- any(c(i, j) %in% c("BMI", "PhysHlth", "GenHlth", "MentHlth", 
                                    "Age", "Education", "Income"))
        if (temp3) { 
            corr_mat[col_count, row_count] <- cor(temp1, 
                                    temp2, method = "spearman")
        } else corr_mat[col_count, row_count] <- cramer(table(temp1, temp2))
    }
}

corr_mat <- corr_mat |> round(4)
dimnames(corr_mat) <- list(names(dat), names(dat))

# install.packages("corrplot")
library(corrplot)
# Create a heatmap with correlation values
corrplot(corr_mat, method = "color", type = "full", 
         order = "hclust", 
         addCoef.col = "black", 
         tl.col = "black", tl.srt = 45) 


```

#### Preparation data 


```{r}
#| warning: false
#| fig-height: 9
#| fig-width: 9



n <- 3e+3
ind <- sample(nrow(dat), size = n, replace = FALSE)
new_dat <- dat |> 
                slice(ind)
y <- new_dat$Diabetes_binary |> unlist()
p <- 0.8
train <- createDataPartition(y, p, 
            list = FALSE, times = 1)
name_cols <- new_dat |> names()
name_cols
X <- new_dat |> 
       dplyr :: select(name_cols[-1])

cat_var <- X |> names() |> setdiff(c( "BMI", "PhysHlth", 
                            "GenHlth", "MentHlth", 
                            "Age", "Education", "Income"))

num_var <- c("BMI", "PhysHlth", "GenHlth", "MentHlth", 
                                    "Age", "Education", "Income")

xScale <- X 

for (i in num_var) {
    xScale[[i]] <- scale(xScale[[i]], center = mean(xScale[[i]]), 
                    scale = sd(xScale[[i]]))
}

yTrain <- y[train]
yTest <- y[-train]

dat |> names()

colMeans(xScale)
apply(xScale, 2, sd)

xTrain <- xScale |> _[train, ]
xTest <- xScale |> _[-train, ] 


xTrain <- xTrain  |> as.data.frame()
xTest <- xTest |> as.data.frame()

xTrain_mat <- model.matrix(~ ., data = xTrain)[, -1]
xTest_mat <- model.matrix(~ ., data = xTest)[, -1]


# xTrain_mat |> dim()



```


#### fit stan models 


```{r}
#| warning: false
#| 
stanFit1 <- stan(file = "model_3_update.stan", 
data = list(N = nrow(xTrain), L = nrow(xTest), X_test = xTest_mat,
        k = ncol(xTrain), y = yTrain,  X_train = xTrain_mat), iter = 500, chains = 3)

# saveRDS(stanFit1, "Model3.RDS")

plot(stanFit1)
plot(stanFit1, pars = c("alpha", "beta"))
traceplot(stanFit1, pars = c("alpha", "beta"))
# ext_fit <- rstan :: extract(stanFit1)


# # Accuracy
# mean(apply(ext_fit$y_test, 2, median) == yTest)

```


***
***







```{r}
#| warning: false

# stanFit1 <- readRDS("Model3.RDS")


```


***
***


```{r}

#| warning: false
#| message: false
#| fig-height: 12
#| fig-width: 12


plot(stanFit1, pars = c("alpha", "beta"))
traceplot(stanFit1, pars = c("alpha", "beta"))
ext_fit <- rstan :: extract(stanFit1)


# Accuracy
mean(apply(ext_fit$y_test, 2, median) == yTest)

```


***
***
***
***


## Using brms 


```{r}
#| warning: false
#| fig-height: 12
#| fig-width: 12


set.seed(1234)
if (!require(brms)) {
    chooseCRANmirror(graphics = FALSE, ind = 1)
    install.packages("brms")
    library(brms)
}

if (!require(bayesplot)) {
    chooseCRANmirror(graphics = FALSE, ind = 1)
    install.packages("bayesplot")
    library(bayesplot)
}



new_dat2 <- cbind(yTrain, xTrain) |> 
                setNames(new_dat |> names()) |> 
                mutate()
names(new_dat2)
temp1 <- names(new_dat2)[-1]


temp2 <- paste(temp1, collapse = " + ")
form <- paste(names(new_dat2)[1], temp2, sep = " ~ ")




## define Priors 


Model4 <- brm(as.formula(form), family = bernoulli, 
            data = new_dat2)

# Get Summary of Model 
M4 <- summary(Model4)
M4

# Get Rhat 
M4$fixed$Rhat

saveRDS(Model4, "brms_Model4")
Model4 <- readRDS("brms_Model4")
prior_summary(Model4)

prob <- predict(Model4, xTest)[, 1]
conf_mat <- table((prob > 0.5), yTest)
conf_mat
acc <- sum(diag(conf_mat)) / sum(conf_mat)
acc


pp_check(Model4)
```


***
***
***



#### Model 5 With Normal Prior


```{r}
#| warning: false
#| fig-height: 12
#| fig-width: 12



## define Priors 
priors <- c(
    prior_string("normal(0, 15)", class = "b"), 
    prior_string("normal(0, 20)", class = "Intercept") 
)

# set_prior(priors)

Model5 <- brm(as.formula(form),  data = new_dat2, 
            family = bernoulli, 
            prior = priors)


# Get summary Of Model
M5 <- summary(Model5)
M5

# Get Rhat
M5$fixed$Rhat


prior_summary(Model5)

prob2 <- predict(Model5, xTest)[, 1]
conf_mat2 <- table((prob2 > 0.5), yTest)
conf_mat2
acc2 <- sum(diag(conf_mat2)) / sum(conf_mat2)
acc2


mcmc_plot(Model5, type = "trace")
mcmc_plot(Model5, type = "dens")
bayesplot :: pp_check(Model5, type = "error_hist")
bayesplot :: pp_check(Model5, type = "loo_pit")
bayesplot :: pp_check(Model5, type = "loo_pit_overlay")
bayesplot :: pp_check(Model5, type = "bars")
bayesplot :: pp_check(Model5, type = "dens_overlay")
waic(Model4)
waic(Model5)

```



***
***
***



#### Model 6 With Cauchy  Prior

```{r}
#| warning: false
#| fig-height: 12
#| fig-width: 12





## define Priors 
priors2 <- c(
    prior_string("cauchy(0, 3)", class = "b"),
    prior_string("normal(0, 5)", class = "Intercept") 
)

# set_prior(priors)

Model6 <- brm(as.formula(form),  data = new_dat2, 
            family = bernoulli, 
            prior = priors2)


# Get Summary of Model 
M6 <- summary(Model6)
M6 

# Get Rhat
M6$fixed$Rhat

prior_summary(Model6)

prob3 <- predict(Model6, xTest)[, 1]
conf_mat3 <- table((prob3 > 0.5), yTest)
conf_mat3
acc3 <- sum(diag(conf_mat3)) / sum(conf_mat3)
acc3


mcmc_plot(Model6, type = "trace")
mcmc_plot(Model6, type = "dens")
bayesplot :: pp_check(Model6, type = "error_hist")
bayesplot :: pp_check(Model6, type = "loo_pit")
bayesplot :: pp_check(Model6, type = "loo_pit_overlay")
bayesplot :: pp_check(Model6, type = "bars")
bayesplot :: pp_check(Model6, type = "dens_overlay")
waic(Model6)

```


***
***
***


#### Model 7 With t studnet  Prior

```{r}
#| warning: false
#| fig-height: 12
#| fig-width: 12





## define Priors 
priors3 <- c(
    prior_string("student_t(10, 0, 4)", class = "b"),
    prior_string("cauchy(0, 5)", class = "Intercept") 
)

# set_prior(priors)

Model7 <- brm(as.formula(form),  data = new_dat2, 
            family = bernoulli, 
            prior = priors3)


# Get summary of model 
M7 <- summary(Model7)
M7 

# Get Rhat
M7$fixed$Rhat

prior_summary(Model7)

prob4 <- predict(Model7, xTest)[, 1]
conf_mat4 <- table((prob4 > 0.5), yTest)
conf_mat4
acc4 <- sum(diag(conf_mat4)) / sum(conf_mat4)
acc4


mcmc_plot(Model7, type = "trace")
mcmc_plot(Model7, type = "dens")
bayesplot :: pp_check(Model7, type = "error_hist")
bayesplot :: pp_check(Model7, type = "loo_pit")
bayesplot :: pp_check(Model7, type = "loo_pit_overlay")
bayesplot :: pp_check(Model7, type = "bars")
bayesplot :: pp_check(Model7, type = "dens_overlay")
waic(Model7)

```



***
***
***


#### Model 8 Using Logistic For Prior


```{r}
#| warning: false
#| fig-height: 12
#| fig-width: 12



## define Priors 
priors4 <- c(
    prior_string("logistic(0, 3)", class = "b"),
    prior_string("normal(0, 5)", class = "Intercept") 
)

# set_prior(priors)

Model8 <- brm(as.formula(form),  data = new_dat2, 
            family = bernoulli, 
            prior = priors4)


# Get summary of Model 
M8 <- summary(Model8)
M8

# get Rhat
M8$fixed$Rhat

prior_summary(Model8)

prob5 <- predict(Model8, xTest)[, 1]
conf_mat5 <- table((prob5 > 0.5), yTest)
conf_mat5
acc5 <- sum(diag(conf_mat5)) / sum(conf_mat5)
acc5


mcmc_plot(Model8, type = "trace")
mcmc_plot(Model8, type = "dens")
bayesplot :: pp_check(Model8, type = "error_hist")
bayesplot :: pp_check(Model8, type = "loo_pit")
bayesplot :: pp_check(Model8, type = "loo_pit_overlay")
bayesplot :: pp_check(Model8, type = "bars")
bayesplot :: pp_check(Model8, type = "dens_overlay")
waic(Model8)

```




***
***
***



#### Model 

```{r}
#| warning: false
#| fig-height: 12
#| fig-width: 12




## define Priors 
priors5 <- c( 
    prior_string("normal(0, 0.5)", class = "b"),
    prior_string("normal(0, 5)", class = "Intercept") 
)

# set_prior(priors)

Model9 <- brm(as.formula(form),  data = new_dat2, 
            family = bernoulli, 
            prior = priors5)


# Get summary of Model 
M9 <- summary(Model9)
M9 


# get Rhat
M9$fixed$Rhat

prior_summary(Model9)

prob6 <- predict(Model9, xTest)[, 1]
conf_mat6 <- table((prob6 > 0.5), yTest)
conf_mat6
acc6 <- sum(diag(conf_mat6)) / sum(conf_mat6)
acc6


mcmc_plot(Model9, type = "trace")
mcmc_plot(Model9, type = "dens")
bayesplot :: pp_check(Model9, type = "error_hist")
bayesplot :: pp_check(Model9, type = "loo_pit")
bayesplot :: pp_check(Model9, type = "loo_pit_overlay")
bayesplot :: pp_check(Model9, type = "bars")
bayesplot :: pp_check(Model9, type = "dens_overlay")
waic(Model9)


```




#### Simple Model 

```{r}
#| warning: false
#| fig-height: 12
#| fig-width: 12

library(MASS)

Model10 <- glm(as.formula(form), data = new_dat2, 
                family = binomial(link = "logit"))
summary(Model10)

prob7 <- predict(Model10, xTest, type = "response") 
conf_mat7 <- table((prob7 > 0.5), yTest)
conf_mat7
acc7 <- sum(diag(conf_mat7)) / sum(conf_mat7)
acc7


# install.packages("car")
AIC(Model10)
car :: vif(Model10)

```